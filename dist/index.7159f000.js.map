{"mappings":"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","sources":["RGraph.svg.hbar.js"],"sourcesContent":["'version:2024-03-10 (6.17)';\n//\n    // o---------------------------------------------------------------------------------o\n    // | This file is part of the RGraph package - you can learn more at:                |\n    // |                                                                                 |\n    // |                       https://www.rgraph.net/license.html                       |\n    // |                                                                                 |\n    // | RGraph is dual-licensed under the Open Source GPL license. That means that it's |\n    // | free to use and there are no restrictions on what you can use RGraph for!       |\n    // | If the GPL license does not suit you however, then there's an inexpensive       |\n    // | commercial license option available. See the URL above for more details.        |\n    // o---------------------------------------------------------------------------------o\n\n\n    RGraph = window.RGraph || {isrgraph:true,isRGraph:true,rgraph:true};\n    RGraph.SVG = RGraph.SVG || {};\n\n// Module pattern\n(function (win, doc, undefined)\n{\n    RGraph.SVG.HBar = function (conf)\n    {\n        //\n        // A setter that the constructor uses (at the end)\n        // to set all of the properties\n        //\n        // @param string name  The name of the property to set\n        // @param string value The value to set the property to\n        //\n        this.set = function (name, value)\n        {\n            if (arguments.length === 1 && typeof name === 'object') {\n                for (i in arguments[0]) {\n                    if (typeof i === 'string') {\n                        \n                        name  = ret.name;\n                        value = ret.value;\n\n                        this.set(name, value);\n                    }\n                }\n            } else {\n\n                // Go through all of the properties and make sure\r\n                // that they're using the correct capitalisation\r\n                name = this.properties_lowercase_map[name.toLowerCase()] || name;\n                \n                var ret = RGraph.SVG.commonSetter({\n                    object: this,\n                    name:   name,\n                    value:  value\n                });\n\n                name  = ret.name;\n                value = ret.value;\n\n                this.properties[name] = value;\n\n                // If setting the colors, update the originalColors\n                // property too\n                if (name === 'colors') {\n                    this.originalColors = RGraph.SVG.arrayClone(value);\n                    this.colorsParsed = false;\n                }\n            }\n\n            return this;\n        };\n\n\n\n\n\n\n\n\n        //\n        // A getter.\n        // \n        // @param name  string The name of the property to get\n        //\n        this.get = function (name)\n        {\n            // Go through all of the properties and make sure\r\n            // that they're using the correct capitalisation\r\n            name = this.properties_lowercase_map[name.toLowerCase()] || name;\n\n            return this.properties[name];\n        };\n\n\n\n\n\n\n\n        // Convert strings to numbers\n        conf.data = RGraph.SVG.stringsToNumbers(conf.data);\n\n\n\n\n\n        this.type             = 'hbar';\n        this.id               = conf.id;\n        this.uid              = RGraph.SVG.createUID();\n        this.container        = document.getElementById(this.id);\n        this.layers           = {}; // MUST be before the SVG tag is created!\n        this.svg              = RGraph.SVG.createSVG({object: this,container: this.container});\n        this.svgAllGroup      = RGraph.SVG.createAllGroup(this);\n        this.clipid           = null; // Used to clip the canvas\n        this.isRGraph         = true;\n        this.isrgraph         = true;\n        this.rgraph           = true;\n        this.width            = Number(this.svg.getAttribute('width'));\n        this.height           = Number(this.svg.getAttribute('height'));\n        this.data             = conf.data;\n        this.coords           = [];\n        this.coords2          = [];\n        this.coordsSpline     = [];\n        this.stackedBackfaces = [];\n        this.colorsParsed     = false;\n        this.originalColors   = {};\n        this.gradientCounter  = 1;\n        this.isTrace          = false; // Used for the vertical line trace effect\n        this.firstDraw        = true; // After the first draw this will be false\n\n\n\n\n\n\n\n\n\n\n\n        // Add this object to the ObjectRegistry\n        RGraph.SVG.OR.add(this);\n        \n        this.container.style.display = 'inline-block';\n\n        this.properties =\n        {\n            marginLeft:      100,\n            marginRight:     35,\n            marginRightAuto: null,\n            marginTop:       35,\n            marginBottom:    35,\n            marginLeftAuto:  true,\n\n            backgroundColor:            null,\n            backgroundImage:            null,\n            backgroundImageAspect:      'none',\n            backgroundImageStretch:     true,\n            backgroundImageOpacity:     null,\n            backgroundImageX:           null,\n            backgroundImageY:           null,\n            backgroundImageW:           null,\n            backgroundImageH:           null,\n            backgroundGrid:             true,\n            backgroundGridColor:        '#ddd',\n            backgroundGridLinewidth:    1,\n            backgroundGridHlines:       true,\n            backgroundGridHlinesCount:  null,\n            backgroundGridVlines:       true,\n            backgroundGridVlinesCount:  null,\n            backgroundGridBorder:       true,\n            backgroundGridDashed:       false,\n            backgroundGridDotted:       false,\n            backgroundGridDashArray:    null,\n            \n            // 20 colors. If you need more you need to set the colors property\n            colors: [\n                'red', '#0f0', '#00f', '#ff0', '#0ff', '#0f0','pink','orange','gray','black',\n                'red', '#0f0', '#00f', '#ff0', '#0ff', '#0f0','pink','orange','gray','black'\n            ],\n            colorsSequential:     false,\n            colorsStroke:          'rgba(0,0,0,0)',\n\n            marginInner:              3,\n            marginInnerGrouped:       2,\n            marginInnerTop:           0,\n            marginInnerBottom:        0,\n\n            xaxis:                true,\n            xaxisLinewidth:       1,\n            xaxisTickmarks:       true,\n            xaxisTickmarksLength: 5,\n            xaxisColor:           'black',\n            xaxisLabels:          [],\n            xaxisLabelsOffsetx:   0,\n            xaxisLabelsOffsety:   0,\n            xaxisLabelsCount:     5,\n            xaxisScale:           true,\n            xaxisScaleUnitsPre:        '',\n            xaxisScaleUnitsPost:       '',\n            xaxisScaleStrict:          false,\n            xaxisScaleDecimals:        0,\n            xaxisScaleThousand:           '.',\n            xaxisScaleThousand:        ',',\n            xaxisScaleRound:           false,\n            xaxisScaleMax:             null,\n            xaxisScaleMin:             0,\n            xaxisScaleFormatter:       null,\n            xaxisLabelsPositionEdgeTickmarksCount: null,\n            xaxisLabelsColor:       null,\n            xaxisLabelsBold:        null,\n            xaxisLabelsItalic:      null,\n            xaxisLabelsFont:        null,\n            xaxisLabelsSize:        null,\n            xaxisTitle:           '',\n            xaxisTitleBold:       null,\n            xaxisTitleSize:       null,\n            xaxisTitleFont:       null,\n            xaxisTitleColor:      null,\n            xaxisTitleItalic:     null,\n            xaxisTitleOffsetx:    0,\n            xaxisTitleOffsety:    0,\n            xaxisTitleX:          null,\n            xaxisTitleY:          null,\n            xaxisTitleHalign:     null,\n            xaxisTitleValign:     null,\n\n            yaxis:                true,\n            yaxisLinewidth:       1,\n            yaxisTickmarks:       true,\n            yaxisTickmarksLength: 3,\n            yaxisTickmarksCount: 5,\n            yaxisLabels:          [],\n            yaxisLabelsPosition:  'section',\n            yaxisLabelsOffsetx:   0,\n            yaxisLabelsOffsety:   0,\n            yaxisScale:           false,\n            yaxisLabelsPositionSectionTickmarksCount: null,\n            yaxisColor:           'black',\n            yaxisLabelsFont:      null,\n            yaxisLabelsSize:      null,\n            yaxisLabelsColor:     null,\n            yaxisLabelsBold:      null,\n            yaxisLabelsItalic:    null,\n            yaxisPosition:        'left',\n            yaxisLabelsFormattedDecimals:  0,\n            yaxisLabelsFormattedUnitsPre:  '',\n            yaxisLabelsFormattedUnitsPost: '',\n            yaxisLabelsFormattedThousand:  ',',\n            yaxisLabelsFormattedPoint:     '.',\n            yaxisTitle:           '',\n            yaxisTitleBold:       null,\n            yaxisTitleSize:       null,\n            yaxisTitleFont:       null,\n            yaxisTitleColor:      null,\n            yaxisTitleItalic:     null,\n            yaxisTitleOffsetx:    0,\n            yaxisTitleOffsety:    0,\n            yaxisTitleX:          null,\n            yaxisTitleY:          null,\n            yaxisTitleHalign:     null,\n            yaxisTitleValign:     null,\n\n            textColor:            'black',\n            textFont:             'Arial, Verdana, sans-serif',\n            textSize:             12,\n            textBold:             false,\n            textItalic:           false,\n            text:                 null,\n            \n            labelsAbove:                  false,\n            labelsAboveFont:              null,\n            labelsAboveSize:              null,\n            labelsAboveBold:              null,\n            labelsAboveItalic:            null,\n            labelsAboveColor:             null,\n            labelsAboveBackground:        null,\n            labelsAboveBackgroundPadding: 0,\n            labelsAboveUnitsPre:          null,\n            labelsAboveUnitsPost:         null,\n            labelsAbovePoint:             null,\n            labelsAboveThousand:          null,\n            labelsAboveFormatter:         null,\n            labelsAboveDecimals:          null,\n            labelsAboveOffsetx:           0,\n            labelsAboveOffsety:           0,\n            labelsAboveHalign:            null,\n            labelsAboveValign:            'center',\n            labelsAboveSpecific:          null,\n            \n            labelsInbar:                  false,\n            labelsInbarHalign:            'center',\n            labelsInbarValign:            'center',\n            labelsInbarFont:              null,\n            labelsInbarSize:              null,\n            labelsInbarBold:              null,\n            labelsInbarItalic:            null,\n            labelsInbarColor:             null,\n            labelsInbarBackground:        null,\n            labelsInbarBackgroundPadding: 0,\n            labelsInbarUnitsPre:          null,\n            labelsInbarUnitsPost:         null,\n            labelsInbarPoint:             null,\n            labelsInbarThousand:          null,\n            labelsInbarFormatter:         null,\n            labelsInbarDecimals:          null,\n            labelsInbarOffsetx:           0,\n            labelsInbarOffsety:           0,\n            labelsInbarSpecific:          null,\n\n            linewidth:            1,\n            grouping:             'grouped',\n            \n            tooltips:                        null,\n            tooltipsOverride:                null,\n            tooltipsEffect:                  'fade',\n            tooltipsCssClass:                'RGraph_tooltip',\n            tooltipsCss:                     null,\n            tooltipsEvent:                   'click',\n            tooltipsFormattedThousand:       ',',\n            tooltipsFormattedPoint:          '.',\n            tooltipsFormattedDecimals:       0,\n            tooltipsFormattedUnitsPre:       '',\n            tooltipsFormattedUnitsPost:      '',\n            tooltipsFormattedKeyColors:      null,\n            tooltipsFormattedKeyColorsShape: 'square',\n            tooltipsFormattedKeyLabels:      [],\n            tooltipsFormattedTableHeaders:   null,\n            tooltipsFormattedTableData:      null,\n            tooltipsPointer:                 true,\n            tooltipsPointerOffsetx:          0,\n            tooltipsPointerOffsety:          0,\n            tooltipsPositionStatic:          true,\n\n            highlightStroke:      'rgba(0,0,0,0)',\n            highlightFill:        'rgba(255,255,255,0.7)',\n            highlightLinewidth:   1,\n            \n            title:                '',\n            titleX:               null,\n            titleY:               null,\n            titleHalign:          'center',\n            titleValign:          null,\n            titleSize:            null,\n            titleColor:           null,\n            titleFont:            null,\n            titleBold:            null,\n            titleItalic:          null,\n            \n            titleSubtitle:        null,\n            titleSubtitleColor:   '#aaa',\n            titleSubtitleSize:    null,\n            titleSubtitleFont:    null,\n            titleSubtitleBold:    null,\n            titleSubtitleItalic:  null,\n            \n            shadow:               false,\n            shadowOffsetx:        2,\n            shadowOffsety:        2,\n            shadowBlur:           2,\n            shadowColor:          'rgba(0,0,0,0.25)',\n\n\n\n            key:              null,\n            keyColors:        null,\n            keyOffsetx:       0,\n            keyOffsety:       0,\n            keyLabelsOffsetx: 0,\n            keyLabelsOffsety: -1,\n            keyLabelsSize:    null,\n            keyLabelsBold:    null,\n            keyLabelsItalic:  null,\n            keyLabelsColor:   null,\n            keyLabelsFont:    null,\n\n            line:                           false,\r\n            lineLinejoin:                   'round',\r\n            lineLinecap:                    'round',\r\n            lineLinewidth:                  2,\r\n            lineTickmarksLinewidth:         2,\r\n            lineTickmarksStyle:             null,\r\n            lineTickmarksSize:              5,\r\n            lineColor:                      'black',\r\n            lineShadow:                     true,\r\n            lineShadowColor:               '#666',\r\n            lineShadowBlur:                 2,\r\n            lineShadowOffsetx:              2,\r\n            lineShadowOffsety:              2,\n            lineSpline:                     false,\n            lineTickmarksDrawNonNull:       false,\n            \n            clip:                           null\n        };\n\n\n        //\n        // Add the reverse look-up table  for property names\n        // so that property names can be specified in any case.\n        //\n        this.properties_lowercase_map = [];\n        for (var i in this.properties) {\n            if (typeof i === 'string') {\n                this.properties_lowercase_map[i.toLowerCase()] = i;\n            }\n        }\n\n\n\n        //\n        // Copy the global object properties to this instance\n        //\n        RGraph.SVG.getGlobals(this);\n\n\n\n\n\n        //\n        // \"Decorate\" the object with the generic effects if the effects library has been included\n        //\n        if (RGraph.SVG.FX && typeof RGraph.SVG.FX.decorate === 'function') {\n            RGraph.SVG.FX.decorate(this);\n        }\n\n\n\n\n\n        // Add the responsive function to the object\n        this.responsive = RGraph.SVG.responsive;\n\n\n\n\n\n        var properties = this.properties;\n\n\n\n\n\n\n\n\n        //\n        // The draw method draws the Bar chart\n        //\n        this.draw = function ()\n        {\n            // Fire the beforedraw event\n            RGraph.SVG.fireCustomEvent(this, 'onbeforedraw');\n\n\n\n\n            //\n            // Do the yaxis label substitution. This has to be called\n            // before the left (or right) margin size is calculated.\n            //\n            this.yaxisLabelSubstitution();\n\n\n\n\n            // Should be the first(ish) thing that's done in the\n            // .draw() function except for the onbeforedraw event\n            // and the installation of clipping.\n            this.width  = Number(this.svg.getAttribute('width'));\n            this.height = Number(this.svg.getAttribute('height'));\n            \n            this.coords  = [];\n            this.coords2 = [];\n\n\n\n            // Create the defs tag if necessary\n            RGraph.SVG.createDefs(this);\n\n\n            //\n            // Handle the marginLeft autosizing\n            //\n            if (properties.marginLeftAuto) {\n\n                var textConf = RGraph.SVG.getTextConf({                    \n                    object: this,\n                    prefix: 'yaxisLabels'\n                });\n\n                for (var i=0,len=properties.yaxisLabels.length,maxLength=0; i<len; ++i) {\n                    var sizes = RGraph.SVG.measureText({\n                        text:   properties.yaxisLabels[i],\n                        bold:   textConf.bold,\n                        size:   textConf.size,\n                        font:   textConf.font,\n                        italic: textConf.italic\n                    });\n                    \n                    maxLength = Math.max(maxLength, sizes[0]);\n                }\n                \n                //\n                // If there's a Y axis title specified then account for that\n                //\n                if (properties.yaxisTitle) {\n                    var textConf_title = RGraph.SVG.getTextConf({                    \n                        object: this,\n                        prefix: 'yaxisTitle'\n                    });\n\n                    var yaxisTitleSize = RGraph.SVG.measureText({\n                        text: properties.yaxisTitle,\n                        bold: textConf_title.bold,\n                        size: textConf_title.size,\n                        font: textConf_title.font,\n                        font: textConf_title.italic\n                    });\n                    \n                    maxLength = maxLength + yaxisTitleSize[1];\n                }\n\n                properties.marginLeft = maxLength + 15;\n\n                // Minimum left margin of 15\n                if (properties.marginLeft < 15) {\n                    properties.marginLeft = 15;\n                }\n            }\n            \n            // Handle margin right autosizing for when the\n            // yaxisPosition is set to ight\n            if (properties.yaxisPosition === 'right' && properties.marginRightAuto !== false) {\n                for (var i=0,len=properties.yaxisLabels.length,maxLength=0; i<len; ++i) {\n                    var sizes = RGraph.SVG.measureText({\n                        text: properties.yaxisLabels[i],\n                        bold: properties.yaxisLabelsBold || properties.textBold,\n                        size: properties.yaxisLabelsSize || properties.textSize,\n                        font: properties.yaxisLabelsFont || properties.textFont\n                    });\n                    \n                    maxLength = Math.max(maxLength, sizes[0]);\n                }\n                \n                properties.marginRight = maxLength + 15;\n\n                // Minimum right margin of 15\n                if (properties.marginRight < 15) {\n                    properties.marginRight = 15;\n                }\n            }\n\n\n\n\n            this.graphWidth  = this.width - properties.marginLeft - properties.marginRight;\n            this.graphHeight = this.height - properties.marginTop - properties.marginBottom;\n\n\n\n            // Parse the colors for gradients\n            RGraph.SVG.resetColorsToOriginalValues({object:this});\n            this.parseColors();\n\n\n\n            // Go through the data and work out the maximum value\n            var values = [];\n\n            for (var i=0,max=0; i<this.data.length; ++i) {\n                if (typeof this.data[i] === 'number') {\n                    values.push(this.data[i]);\n                \n                } else if (RGraph.SVG.isArray(this.data[i]) && properties.grouping === 'grouped') {\n                    values.push(RGraph.SVG.arrayMax(this.data[i]));\n\n                } else if (RGraph.SVG.isArray(this.data[i]) && properties.grouping === 'stacked') {\n                    values.push(RGraph.SVG.arraySum(this.data[i]));\n                }\n            }\n            var max = RGraph.SVG.arrayMax(values);\n\n            // A custom, user-specified maximum value\n            if (typeof properties.xaxisScaleMax === 'number') {\n                max = properties.xaxisScaleMax;\n            }\n            \n            // Set the ymin to zero if it's set to mirror\n            if (properties.xaxisScaleMin === 'mirror' || properties.xaxisScaleMin === 'middle' || properties.xaxisScaleMin === 'center') {\n                this.mirrorScale   = true;\n                properties.xaxisScaleMin = properties.xaxisScaleMax * -1;\n            }\n\n\n            //\n            // Generate an appropiate scale\n            //\n            this.scale = RGraph.SVG.getScale({\n                object:    this,\n                numlabels: properties.xaxisLabelsCount,\n                unitsPre:  properties.xaxisScaleUnitsPre,\n                unitsPost: properties.xaxisScaleUnitsPost,\n                max:       max,\n                min:       properties.xaxisScaleMin,\n                point:     properties.xaxisScalePoint,\n                round:     properties.xaxisScaleRound,\n                thousand:  properties.xaxisScaleThousand,\n                decimals:  properties.xaxisScaleDecimals,\n                strict:    typeof properties.xaxisScaleMax === 'number',\n                formatter: properties.xaxisScaleFormatter\n            });\n\n\n\n            //\n            // Get the scale a second time if the xmin should be mirored\n            //\n            // Set the xmin to zero if it's set mirror\n            if (this.mirrorScale) {\n                this.scale = RGraph.SVG.getScale({\n                    object:    this,\n                    numlabels: properties.xaxisLabelsCount,\n                    unitsPre:  properties.xaxisScaleUnitsPre,\n                    unitsPost: properties.xaxisScaleUnitsPost,\n                    max:       this.scale.max,\n                    min:       this.scale.max * -1,\n                    point:     properties.xaxisScaleThousand,\n                    round:     false,\n                    thousand:  properties.xaxisScaleThousand,\n                    decimals:  properties.xaxisScaleDecimals,\n                    strict:    true,\n                    formatter: properties.xaxisScaleFormatter\n                });\n            }\n\n            // Now the scale has been generated adopt its max value\n            this.max      = this.scale.max;\n            properties.xaxisScaleMax = this.scale.max;\n\n            this.min      = this.scale.min;\n            properties.xaxisScaleMin = this.scale.min;\n\n\n\n\n\n\n\n\n\n\n\n\n            // Install clipping if requested\r\n            if (this.properties.clip) {\r\n\r\n                this.clipid = RGraph.SVG.installClipping(this);\r\n\r\n                // Add the clip ID to the all group\r\n                this.svgAllGroup.setAttribute(\r\n                    'clip-path',\r\n                    'url(#{1})'.format(this.clipid)\r\n                );\r\n            } else {\n                // No clipping - so ensure that there's no clip-path\n                // attribute\n                this.clipid = null;\n                this.svgAllGroup.removeAttribute('clip-path');\n            }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n            // Draw the background first\n            RGraph.SVG.drawBackground(this);\n\n            // Draw the bars\n            this.drawBars();\n\n\n            // Draw the axes over the bars\n            RGraph.SVG.drawXAxis(this);\n            RGraph.SVG.drawYAxis(this);\n\n\n            // Draw the labelsAbove\n            this.drawLabelsAbove();\n\n\n            // Draw the labelsInbar\n            this.drawLabelsInbar();\n            \n            \n            // Draw the verical line\n            if (this.properties.line) {\n                this.drawLine();\n            }\n\n\n\n\n\n\n            // Draw the key\n            if (typeof properties.key !== null && RGraph.SVG.drawKey) {\n                RGraph.SVG.drawKey(this);\n            } else if (!RGraph.SVG.isNull(properties.key)) {\n                alert('The drawKey() function does not exist - have you forgotten to include the key library?');\n            }\n\n\n\n\n            \n            \n\n\n\n\n            // Add the event listener that clears the highlight rect if\n            // there is any. Must be MOUSEDOWN (ie before the click event)\n            var obj = this;\n            document.body.addEventListener('mousedown', function (e)\n            {\n                RGraph.SVG.removeHighlight(obj);\n\n            }, false);\n\n\n\n\n\n\n\n\n            //\n            // Allow the addition of custom text via the\n            // text: property.\n            //\n            RGraph.SVG.addCustomText(this);\n\n\n\n\n\n\n\n\n\n\n\n\n\n            //\n            // Fire the onfirstdraw event\n            //\n            if (this.firstDraw) {\n                this.firstDraw = false;\n                RGraph.SVG.fireCustomEvent(this, 'onfirstdraw');\n            }\n\n\n\n\n\n\n            // Fire the draw event\n            RGraph.SVG.fireCustomEvent(this, 'ondraw');\n\n\n\n\n\n\n\n            //\n            // Install any inline responsive configuration. This\n            // should be last in the draw function - even after\n            // the draw events.\n            //\n            RGraph.SVG.installInlineResponsive(this);\n\n\n\n\n\n\n\n\n\n\n\n\n            return this;\n        };\n\n\n\n\n\n\n\n\n        //\n        // New create() shortcut function\n        // For example:\n        //    this.create('rect,x:0,y:0,width:100,height:100'[,parent]);\n        //\n        // @param str string The tag definition to parse and create\n        // @param     object The (optional) parent element\n        // @return    object The new tag\n        //\n        this.create = function (str)\n        {\n            var def = RGraph.SVG.create.parseStr(this, str);\n            def.svg = this.svg;\n            \n            // By default the parent is the SVG tag - but if\n            // requested then change it to the tag that has\n            // been given\n            if (arguments[1]) {\n                def.parent = arguments[1];\n            }\n\n            return RGraph.SVG.create(def);\n        };\n\n\n\n\n\n\n\n\n        //\n        // Do the label substitution. This is called from the top of the\n        // draw function\n        //\n        this.yaxisLabelSubstitution = function ()\n        {\n            if (properties.yaxisLabels && properties.yaxisLabels.length) {\n                //\n                // If the yaxisLabels option is a string then turn it\n                // into an array.\n                //\n                if (typeof properties.yaxisLabels === 'string') {\n                    properties.yaxisLabels = RGraph.SVG.arrayPad({\n                        array:  [],\n                        length: this.data.length,\n                        value:  properties.yaxisLabels\n                    });\n                }\n\n                //\n                // Label substitution\n                //\n                for (var i=0; i<properties.yaxisLabels.length; ++i) {\n                    properties.yaxisLabels[i] = RGraph.SVG.labelSubstitution({\n                        object:    this,\n                        text:      properties.yaxisLabels[i],\n                        index:     i,\n                        value:     this.data[i],\n                        decimals:  properties.yaxisLabelsFormattedDecimals  || 0,\n                        unitsPre:  properties.yaxisLabelsFormattedUnitsPre  || '',\n                        unitsPost: properties.yaxisLabelsFormattedUnitsPost || '',\n                        thousand:  properties.yaxisLabelsFormattedThousand  || ',',\n                        point:     properties.yaxisLabelsFormattedPoint     || '.'\n                    });\n                }\n            }\n        };\n\n\n\n\n\n\n\n\n        //\n        // Draws the bars\n        //\n        this.drawBars = function ()\n        {\n            if (properties.shadow) {\n                RGraph.SVG.setShadow({\n                    object:  this,\n                    offsetx: properties.shadowOffsetx,\n                    offsety: properties.shadowOffsety,\n                    blur:    properties.shadowBlur,\n                    color:   properties.shadowColor,\n                    id:      'dropShadow'\n                });\n            }\n\n            // Go through the bars\n            for (var i=0,sequentialIndex=0; i<this.data.length; ++i,++sequentialIndex) {\n\n                // Put place holders in the coords arrays\n                // for NULL VALUES\n                if (RGraph.SVG.isNull(this.data[i])) {\n                    this.coords.push([]);\n                    this.coords2.push([]);\n                }\n\n                //\n                // NORMAL bars\n                //\n                if (typeof this.data[i] === 'number') {\n\n                    var outerSegment = (this.graphHeight - properties.marginInnerTop - properties.marginInnerBottom) / this.data.length,\n                        width        = this.getWidth(this.data[i]),\n                        height       = ( (this.graphHeight - properties.marginInnerTop - properties.marginInnerBottom) / this.data.length) - properties.marginInner - properties.marginInner,\n                        x            = this.getXCoord(\n                                            (this.scale.min < 0 && this.scale.max < 0) || (this.scale.min > 0 && this.scale.max > 0) ? this.scale.min : 0\n                                        ) - (this.data[i] <  0 ? width : 0),\n                        y            = properties.marginTop + properties.marginInnerTop + properties.marginInner + (outerSegment * i);\n\n                    // Allow for the Y axis to be positioned on the right hand side\n                    if (properties.yaxisPosition === 'right' && this.scale.min >= 0) {\n                        x = this.getXCoord(this.data[i]);\n                    }\n                    \n                    if (properties.yaxisPosition === 'right' && this.scale.min < 0) {\n                        x = this.getXCoord(0);\n                    }\n\n                    // If theres a min set but both the min and max are below\n                    // zero the bars should be aligned to the right hand\n                    // side\n                    if (this.scale.min < 0 && this.scale.max < 0) {\n                        x = this.width - properties.marginRight - width;\n                    }\n                    \n                    // Adjust for a negative value\n                    if (this.mirrorScale && properties.yaxisPosition === 'right') {\n                        if (this.data[i] > 0) {\n                            x = this.getXCoord(0) - width;\n                        } else {\n                            x = this.getXCoord(0);\n                        }\n                    }\n                    \n                    // If the X axis is right, move the bar left\n                    if (this.data[i] > 0 && properties.yaxisPosition === 'right') {\n                        x = this.getXCoord(0) - width;\n                    }\n\n                    var rect = RGraph.SVG.create({\n                        svg: this.svg,\n                        parent: this.svgAllGroup,\n                        type: 'rect',\n                        attr: {\n                            stroke: properties.colorsStroke,\n                            fill: properties.colorsSequential ? (properties.colors[sequentialIndex] ? properties.colors[sequentialIndex] : properties.colors[properties.colors.length - 1]) : properties.colors[0],\n                            x: x,\n                            y: y,\n                            width: width,\n                            height: height,\n                            'stroke-width': properties.linewidth,\n                            'data-tooltip': (!RGraph.SVG.isNull(properties.tooltips) && properties.tooltips.length) ? properties.tooltips[i] : '',\n                            'data-index': i,\n                            'data-original-x': x,\n                            'data-original-y': y,\n                            'data-original-width': width,\n                            'data-original-height': height,\n                            'data-sequential-index': sequentialIndex,\n                            'data-value': this.data[i],\n                            filter: properties.shadow ? 'url(#dropShadow)' : ''\n                        }\n                    });\n\n                    this.coords.push({\n                        object:  this,\n                        element: rect,\n                        x:      parseFloat(rect.getAttribute('x')),\n                        y:      parseFloat(rect.getAttribute('y')),\n                        width:  parseFloat(rect.getAttribute('width')),\n                        height: parseFloat(rect.getAttribute('height'))\n                    });\n                    \n                    if (!this.coords2[i]) {\n                        this.coords2[i] = [];\n                    }\n\n                    this.coords2[i].push({\n                        object:  this,\n                        element: rect,\n                        x:      parseFloat(rect.getAttribute('x')),\n                        y:      parseFloat(rect.getAttribute('y')),\n                        width:  parseFloat(rect.getAttribute('width')),\n                        height: parseFloat(rect.getAttribute('height'))\n                    });\n\n\n\n\n\n                    // Add toooltips if necessary\n                    if (!RGraph.SVG.isNull(properties.tooltips) && (properties.tooltips[sequentialIndex] || typeof properties.tooltips === 'string')) {\n\n                        var obj = this;\n\n                        //\n                        // Add tooltip event listeners\n                        //\n                        (function (idx, seq)\n                        {\n                            rect.addEventListener(properties.tooltipsEvent.replace(/^on/, ''), function (e)\n                            {\n                                obj.removeHighlight();\n\n                                // Show the tooltip\n                                RGraph.SVG.tooltip({\n                                    object: obj,\n                                    index: idx,\n                                    group: null,\n                                    sequentialIndex: seq,\n                                    text: typeof properties.tooltips === 'string' ? properties.tooltips : properties.tooltips[seq],\n                                    event: e\n                                });\n                                \n                                // Highlight the rect that has been clicked on\n                                obj.highlight(e.target);\n                            }, false);\n                            \n                            rect.addEventListener('mousemove', function (e)\n                            {\n                                e.target.style.cursor = 'pointer';\n                            }, false);\n                        })(i, sequentialIndex);\n                    }\n\n\n\n\n                //\n                // GROUPED charts\n                //\n                } else if (RGraph.SVG.isArray(this.data[i]) && properties.grouping === 'grouped') {\n\n                    var outerSegment = ( (this.graphHeight - properties.marginInnerTop - properties.marginInnerBottom) / this.data.length),\n                        innerSegment = outerSegment - (2 * properties.marginInner);\n\n                    // Loop through the group\n                    for (var j=0; j<this.data[i].length; ++j,++sequentialIndex) {\n\n                        var width  = Math.abs((this.data[i][j] / (this.max - this.min)) * this.graphWidth),\n                            height = ( (innerSegment - ((this.data[i].length - 1) * properties.marginInnerGrouped)) / this.data[i].length),\n                            y      = properties.marginTop + properties.marginInner + properties.marginInnerTop + (outerSegment * i) + (j * height) + (j * properties.marginInnerGrouped),\n                            x      = this.getXCoord(0) - (this.data[i][j] <  0 ? width : 0);\n\n                        // Work out some coordinates for the width and X coords ///////////////////////\n                        if (this.scale.max < 0 && this.scale.min < this.scale.max) {\n                            var x1 = this.getXCoord(this.data[i][j]);\n                            var x2 = this.getXCoord(this.scale.max);\n                            x      = x1;\n                            width  = x2 - x1;\n                        \n                        } else if (this.scale.min > 0 && this.scale.max > this.scale.min) {\n                            var x1 = this.getXCoord(this.data[i][j]);\n                            var x2 = this.getXCoord(this.scale.min);\n                            x      = this.getXCoord(this.scale.min);\n                            width  = x1 - x2;\n\n                        }\n                        //////////////////////////////////////////////////////////////////////////////\n\n                        // Allow for the Y axis to be positioned on the right hand side\n                        if (properties.yaxisPosition === 'right' && this.scale.min === 0) {\n                            x = this.getXCoord(this.data[i][j]);\n                        }\n\n                        // Allow for the Y axis to be positioned on the right hand side\n                        // with a scale of (for example) -5 -> 20\n                        if (   properties.yaxisPosition === 'right'\n                            && this.scale.min < 0\n                            && this.scale.max >= 0) {\n\n                            if (this.data[i][j] < 0) {\n                                x = this.getXCoord(0);\n                            } else {\n                                x = this.getXCoord(this.data[i][j]);\n                            }\n                        }\n\n                        // Fixes an odd bug\n                        //if (this.mirrorScale && properties.yaxisPosition === 'right') {\n                        //    if (this.data[i][j] > 0) {\n                        //        x -= width;\n                        //    } else {\n                        //        x += width;\n                        //    }\n                        //}\n\n\n\n\n\n\n\n\n                        //\n                        // Determine the fill color\n                        //\n                        var fill;\n                        \n                        if (properties.colorsSequential) {\n                            if (properties.colors[sequentialIndex]) {\n                                fill = properties.colors[sequentialIndex];\n                            }\n                        } else {\n                            if (properties.colors[j]) {\n                                fill = properties.colors[j];\n                            } else {\n                                fill = properties.colors[properties.colors.length - 1];\n                            }\n                        }\n\n\n\n\n                        var rect = RGraph.SVG.create({\n                            svg: this.svg,\n                            type: 'rect',\n                            parent: this.svgAllGroup,\n                            attr: {\n                                stroke: properties['colorsStroke'],\n                                fill: fill,\n                                x: x,\n                                y: y,\n                                width: width,\n                                height: height,\n                                'stroke-width': properties.linewidth,\n                                'data-index': i,\n                                'data-original-x': x,\n                                'data-original-y': y,\n                                'data-original-width': width,\n                                'data-original-height': height,\n                                'data-sequential-index': sequentialIndex,\n                                'data-tooltip': (!RGraph.SVG.isNull(properties.tooltips) && properties.tooltips.length) ? properties.tooltips[sequentialIndex] : '',\n                                'data-value': this.data[i][j],\n                                filter: properties.shadow ? 'url(#dropShadow)' : ''\n                            }\n                        });\n                    \n                        this.coords.push({\n                            object:  this,\n                            element: rect,\n                            x:      parseFloat(rect.getAttribute('x')),\n                            y:      parseFloat(rect.getAttribute('y')),\n                            width:  parseFloat(rect.getAttribute('width')),\n                            height: parseFloat(rect.getAttribute('height'))\n                        });\n\n                        if (!this.coords2[i]) {\n                            this.coords2[i] = [];\n                        }\n        \n                        this.coords2[i].push({\n                            object:  this,\n                            element: rect,\n                            x:      parseFloat(rect.getAttribute('x')),\n                            y:      parseFloat(rect.getAttribute('y')),\n                            width:  parseFloat(rect.getAttribute('width')),\n                            height: parseFloat(rect.getAttribute('height'))\n                        });\n\n\n                        // Add the tooltip data- attribute\n                        if (!RGraph.SVG.isNull(properties.tooltips) && (properties.tooltips[sequentialIndex] || typeof properties.tooltips === 'string') ) {\n                        \n                            var obj = this;\n    \n                        \n                            //\n                            // Add tooltip event listeners\n                            //\n                            (function (idx, seq)\n                            {\n                                var indexes = RGraph.SVG.sequentialIndexToGrouped(seq, obj.data);\n\n                                rect.addEventListener(properties.tooltipsEvent.replace(/^on/, ''), function (e)\n                                {\n                                    obj.removeHighlight();\n\n                                    // Show the tooltip\n                                    RGraph.SVG.tooltip({\n                                        object: obj,\n                                        group: idx,\n                                        index: indexes[1],\n                                        sequentialIndex: seq,\n                                        text: typeof properties.tooltips === 'string' ? properties.tooltips : properties.tooltips[seq],\n                                        event: e\n                                    });\n                                    \n                                    // Highlight the rect that has been clicked on\n                                    obj.highlight(e.target);\n    \n                                }, false);\n                                \n                                rect.addEventListener('mousemove', function (e)\n                                {\n                                    e.target.style.cursor = 'pointer'\n                                }, false);\n                            })(i, sequentialIndex);\n                        }\n                    }\n\n                    --sequentialIndex;\n                        \n\n\n                //\n                // STACKED CHARTS\n                //\n                } else if (RGraph.SVG.isArray(this.data[i]) && properties.grouping === 'stacked') {\n\n                    // This is each bars \"segment\" of the chart\n                    var section = ( (this.graphHeight - properties.marginInnerTop - properties.marginInnerBottom) / this.data.length);\n                    \n                    // Initialise the X coordinate\n                    var x = this.getXCoord(0);\n\n                    // Loop through the stack\n                    for (var j=0; j<this.data[i].length; ++j,++sequentialIndex) {\n\n                        var outerHeight = (this.graphHeight - properties.marginInnerTop - properties.marginInnerBottom) / this.data.length,\n                            width       = Math.abs((this.data[i][j] / (this.max - this.min)) * this.graphWidth),\n                            height      = outerHeight - (2 * properties.marginInner),\n                            y           = properties.marginTop + properties.marginInner + properties.marginInnerTop + (outerHeight * i);\n\n                        if (properties.yaxisPosition === 'right') {\n                            x -= width;\n                        }\n\n                        // If this is the first iteration of the loop and a shadow\n                        // is requested draw a rect here to create it.\n                        if (j === 0 && properties.shadow) {\n\n                            var fullWidth = Math.abs((RGraph.SVG.arraySum(this.data[i]) / (this.max - this.min)) * this.graphWidth);\n\n                            var rect = RGraph.SVG.create({\n                                svg: this.svg,\n                                parent: this.svgAllGroup,\n                                type: 'rect',\n                                attr: {\n                                    x: properties.yaxisPosition === 'right' ? this.getXCoord(0) - fullWidth : this.getXCoord(0),\n                                    y: y,\n                                    width: fullWidth,\n                                    height: height,\n                                    fill: 'white',\n                                    'stroke-width': 0,\n                                    'data-index': i,\n                                    filter: 'url(#dropShadow)'\n                                }\n                            });\n                            \n                            this.stackedBackfaces[i] = rect;\n                        }\n\n\n\n                        // Create the visible bar\n                        var rect = RGraph.SVG.create({\n                            svg: this.svg,\n                            type: 'rect',\n                            parent: this.svgAllGroup,\n                            attr: {\n                                stroke: properties['colorsStroke'],\n                                fill: properties.colorsSequential ? (properties.colors[sequentialIndex] ? properties.colors[sequentialIndex] : properties.colors[properties.colors.length - 1]) : (properties.colors[j] ? properties.colors[j] : properties.colors[properties.colors.length - 1]),\n                                x: x,\n                                y: y,\n                                width: width,\n                                height: height,\n                                'stroke-width': properties.linewidth,\n                                'data-original-width': width,\n                                'data-original-height': height,\n                                'data-original-x': x - width,\n                                'data-original-y': y,\n                                'data-index': i,\n                                'data-sequential-index': sequentialIndex,\n                                'data-tooltip': (!RGraph.SVG.isNull(properties.tooltips) && properties.tooltips.length) ? properties.tooltips[sequentialIndex] : '',\n                                'data-value': this.data[i][j]\n                            }\n                        });\n\n                        this.coords.push({\n                            object:  this,\n                            element: rect,\n                            x:      parseFloat(rect.getAttribute('x')),\n                            y:      parseFloat(rect.getAttribute('y')),\n                            width:  parseFloat(rect.getAttribute('width')),\n                            height: parseFloat(rect.getAttribute('height'))\n                        });\n\n                        if (!this.coords2[i]) {\n                            this.coords2[i] = [];\n                        }\n        \n                        this.coords2[i].push({\n                            object:  this,\n                            element: rect,\n                            x:      parseFloat(rect.getAttribute('x')),\n                            y:      parseFloat(rect.getAttribute('y')),\n                            width:  parseFloat(rect.getAttribute('width')),\n                            height: parseFloat(rect.getAttribute('height'))\n                        });\n\n\n\n                        // Add the tooltips \n                        if (!RGraph.SVG.isNull(properties.tooltips) && (properties.tooltips[sequentialIndex] || typeof properties.tooltips === 'string')) {\n                        \n                            var obj = this;\n    \n                        \n                            //\n                            // Add tooltip event listeners\n                            //\n                            (function (idx, seq)\n                            {\n                                rect.addEventListener(properties.tooltipsEvent.replace(/^on/, ''), function (e)\n                                {\n                                    obj.removeHighlight();\n\n                                    var indexes = RGraph.SVG.sequentialIndexToGrouped(seq, obj.data);\n\n                                    // Show the tooltip\n                                    RGraph.SVG.tooltip({\n                                        object: obj,\n                                        index: indexes[1],\n                                        group: idx,\n                                        sequentialIndex: seq,\n                                        text: typeof properties.tooltips === 'string' ? properties.tooltips : properties.tooltips[seq],\n                                        event: e\n                                    });\n                                    \n                                    // Highlight the rect that has been clicked on\n                                    obj.highlight(e.target);\n                                }, false);\n                                \n                                rect.addEventListener('mousemove', function (e)\n                                {\n                                    e.target.style.cursor = 'pointer'\n                                }, false);\n                            })(i, sequentialIndex);\n                        }\n                        \n                        \n                        // Adjust the X coord\n                        if (properties.yaxisPosition === 'right') {\n                            //x -= width;\n                        } else {\n                            x += width;\n                        }\n\n                    }\n\n                    --sequentialIndex;\n                }\n            }\n\n        };\n\n\n\n\n\n\n\n\n\n        //\n        // This function can be used to retrieve the relevant X coordinate for a\n        // particular value.\n        // \n        // @param int value The value to get the X coordinate for\n        //\n        this.getXCoord = function (value)\n        {\n            var prop = this.properties;\n\n            if (value > this.scale.max) {\n                return null;\n            }\n\n            if (value < this.scale.min) {\n                return null;\n            }\n\n            var x  = ((value - this.scale.min) / (this.scale.max - this.scale.min));\n                x *= this.graphWidth;\n\n            if (properties.yaxisPosition === 'right') {\n                x  = this.width - properties.marginRight - x;\n            } else {\n                x += properties.marginLeft;\n            }\n\n            return x;\n        };\n\n\n\n\n\n\n\n\n\n        //\n        // This function can be used to retrieve the relevant X coordinate for a\n        // particular value.\n        // \n        // @param int value The value to get the X coordinate for\n        //\n        this.getWidth = function (value)\n        {\n            if (this.scale.max <= 0 && this.scale.min < this.scale.max) {\n                var x1 = this.getXCoord(this.scale.max);\n                var x2 = this.getXCoord(value);\n            \n            } else if (this.scale.min > 0 && this.scale.max > this.scale.min) {\n                var x1 = this.getXCoord(this.scale.min);\n                var x2 = this.getXCoord(value);\n            \n            } else {\n                var x1 = this.getXCoord(0);\n                var x2 = this.getXCoord(value);\n            }\n\n            return Math.abs(x1 - x2);\n        };\n        \n        //Math.abs(((this.data[i] - this.scale.min) / (this.max - this.scale.min)) * this.graphWidth)\n\n\n\n\n\n\n\n\n        //\n        // This function can be used to highlight a bar on the chart\n        // \n        // @param object rect The rectangle to highlight\n        //\n        this.highlight = function (rect)\n        {\n            var x      = parseFloat(rect.getAttribute('x')) - 0.5,\n                y      = parseFloat(rect.getAttribute('y')) - 0.5,\n                width  = parseFloat(rect.getAttribute('width')) + 1,\n                height = parseFloat(rect.getAttribute('height')) + 1;\n            \n            var highlight = RGraph.SVG.create({\n                svg: this.svg,\n                type: 'rect',\n                parent: this.svgAllGroup,\n                attr: {\n                    stroke: properties.highlightStroke,\n                    fill: properties.highlightFill,\n                    x: x,\n                    y: y,\n                    width: width,\n                    height: height,\n                    'stroke-width': properties.highlightLinewidth\n                },\n                style: {\n                    pointerEvents: 'none'\n                }\n            });\n\n\n            //if (properties.tooltipsEvent === 'mousemove') {\n            //    highlight.addEventListener('mouseout', function (e)\n            //    {\n            //        highlight.parentNode.removeChild(highlight);\n            //        RGraph.SVG.hideTooltip();\n\n            //        RGraph.SVG.REG.set('highlight', null);\n            //    }, false);\n            //}\n\n\n            // Store the highlight rect in the rebistry so\n            // it can be cleared later\n            RGraph.SVG.REG.set('highlight', highlight);\n        };\n\n\n\n\n\n\n\n\n        //\n        // This allows for easy specification of gradients\n        //\n        this.parseColors = function () \n        {\n            // Save the original colors so that they can be restored when\n            // the canvas is cleared\n            if (!Object.keys(this.originalColors).length) {\n                this.originalColors = {\n                    colors:              RGraph.SVG.arrayClone(properties.colors),\n                    backgroundGridColor: RGraph.SVG.arrayClone(properties.backgroundGridColor),\n                    highlightFill:       RGraph.SVG.arrayClone(properties.highlightFill),\n                    backgroundColor:     RGraph.SVG.arrayClone(properties.backgroundColor),\n                    lineColor:           RGraph.SVG.arrayClone(properties.lineColor),\n                    lineFilledColor:     RGraph.SVG.arrayClone(properties.lineFilledColor)\n                }\n            }\n\n            \n            // colors\n            var colors = properties.colors;\n\n            if (colors) {\n                for (var i=0; i<colors.length; ++i) {\n                    colors[i] = RGraph.SVG.parseColorLinear({\n                        object: this,\n                        color: colors[i],\n                        direction: 'horizontal',\n                        start: properties.marginLeft,\n                        end: this.width - properties.marginRight\n                    });\n                }\n            }\n\n            properties.backgroundGridColor = RGraph.SVG.parseColorLinear({object: this, color: properties.backgroundGridColor, direction: 'horizontal',start: properties.marginLeft,end: this.width - properties.marginRight});\n            properties.highlightFill       = RGraph.SVG.parseColorLinear({object: this, color: properties.highlightFill, direction: 'horizontal',start: properties.marginLeft,end: this.width - properties.marginRight});\n            properties.backgroundColor     = RGraph.SVG.parseColorLinear({object: this, color: properties.backgroundColor});\n            properties.lineColor           = RGraph.SVG.parseColorLinear({object: this, color: properties.lineColor});\n            properties.lineFilledColor     = RGraph.SVG.parseColorLinear({object: this, color: properties.lineFilledColor});\n        };\n\n\n\n\n\n\n\n\n        //\n        // Draws the labelsAbove\n        //\n        this.drawLabelsAbove = function ()\n        {\n            // Go through the above labels\n            if (properties.labelsAbove) {\n\n                // Get the text configuration for the labels\n                var textConf = RGraph.SVG.getTextConf({\n                    object: this,\n                    prefix: 'labelsAbove'\n                });\n                \n                var data = RGraph.SVG.arrayLinearize(this.data);\n\n                for (var i=0; i<this.coords.length; ++i) {\n\n                    var value = data[i].toFixed(typeof properties.labelsAboveDecimals === 'number' ? properties.labelsAboveDecimals : properties.xaxisScaleDecimals);\n                    var indexes = RGraph.SVG.sequentialIndexToGrouped(i, this.data);\n\n\n\n                    if (RGraph.SVG.isArray(this.data[indexes[0]]) && properties.grouping === 'stacked') {\n                        if ((indexes[1] + 1) === this.data[indexes[0]].length) {\n                            value = RGraph.SVG.arraySum(this.data[indexes[0]]);\n                            value = value.toFixed(typeof properties.labelsAboveDecimals === 'number' ? properties.labelsAboveDecimals : properties.xaxisScaleDecimals);\n                        } else {\n                            continue;\n                        }\n                    }\n\n\n                    var str = properties.labelsAboveSpecific ? properties.labelsAboveSpecific[i].toString() : RGraph.SVG.numberFormat({\n                        object:    this,\n                        num:       value,\n                        prepend:   typeof properties.labelsAboveUnitsPre  === 'string'   ? properties.labelsAboveUnitsPre  : null,\n                        append:    typeof properties.labelsAboveUnitsPost === 'string'   ? properties.labelsAboveUnitsPost : null,\n                        point:     typeof properties.labelsAbovePoint     === 'string'   ? properties.labelsAbovePoint     : null,\n                        thousand:  typeof properties.labelsAboveThousand  === 'string'   ? properties.labelsAboveThousand  : null,\n                        formatter: typeof properties.labelsAboveFormatter === 'function' ? properties.labelsAboveFormatter : null\n                    });\n\n                    var halign = properties.labelsAboveHalign,\n                        valign = properties.labelsAboveValign;\n\n\n                    var dimensions = RGraph.SVG.measureText({\n                        text: str,\n                        bold: textConf.bold,\n                        font: textConf.font,\n                        size: textConf.size\n                    });\n\n                    var x      = (value >= 0)\n                                   ? (parseFloat(this.coords[i].element.getAttribute('x')) + 7 + properties.labelsAboveOffsetx)\n                                   : parseFloat(this.coords[i].element.getAttribute('x') - 7 - properties.labelsAboveOffsetx),\n                        y      = parseFloat(this.coords[i].element.getAttribute('y')) + parseFloat(this.coords[i].element.getAttribute('height') / 2) + properties.labelsAboveOffsety,\n                        width  = dimensions[0],\n                        height = dimensions[1],\n                        halign = (value >= 0) ? 'left': 'right';\n\n                    // Corner case\n                    if (properties.yaxisPosition === 'left' && properties.grouping === 'grouped') {\n                        x = parseFloat(this.coords[i].element.getAttribute('x')) + parseFloat(this.coords[i].element.getAttribute('width')) + 7 + properties.labelsAboveOffsetx\n                    }\n\n\n\n\n\n\n                    // ADjust the values if the Y axis is on the RHS\n                    if (properties.yaxisPosition === 'right') {\n                        x = (value >= 0)\n                            ? (parseFloat(this.coords[i].element.getAttribute('x')) - 7 - properties.labelsAboveOffsetx)\n                            : parseFloat(this.coords[i].element.getAttribute('x') + 7 + properties.labelsAboveOffsetx),\n                        halign = (value >= 0) ? 'right': 'left';\n                    \n                    // Special case for an oddity\n                    } else if (RGraph.SVG.isArray(this.data[indexes[0]]) && properties.grouping === 'stacked' && properties.yaxisPosition === 'left') {\n                        x += this.coords2[indexes[0]][indexes[1]].width;\n                    }\n\n                    // Another corner case\n                    if (\n                           properties.yaxisPosition === 'right'\n                        && properties.grouping === 'grouped'\n                        && properties.xaxisScaleMax > 0\n                        && properties.xaxisScaleMin < 0\n                       ) {\n                        \n                        var value = this.coords[i].element.getAttribute('data-value');\n                       \n                        if (value < 0) {\n                            x = this.getXCoord(value) + 7;\n                        } else {\n                            x = this.getXCoord(value) - 7;\n                        }\n                    }\n\n                    // Another corner case\n                    if (\n                           properties.yaxisPosition === 'left'\n                        && properties.grouping === 'grouped'\n                        && properties.xaxisScaleMax > 0\n                        && properties.xaxisScaleMin < 0\n                       ) {\n                        \n                        var value = this.coords[i].element.getAttribute('data-value');\n                       \n                        if (value < 0) {\n                            x = this.getXCoord(value) - 7;\n                        } else {\n                            x = this.getXCoord(value) + 7;\n                        }\n                    }\n\n\n                    // Account for the labels going off the edge of the SVG tag (whilst the Y axis\n                    // is on the left)\n                    if (properties.yaxisPosition === 'right') {\n                        if (x - width < properties.marginLeft && value > 0) {\n                            halign = 'left';\n                            x      = properties.marginLeft + 5;\n                            properties.labelsAboveBackground = properties.labelsAboveBackground || 'rgba(255,255,255,0.95)';\n                        }\n                    } else {\n                        if (x + width > this.width && value > 0) {\n                            halign = 'right';\n                            x      = this.width - 5;\n                            properties.labelsAboveBackground = properties.labelsAboveBackground || 'rgba(255,255,255,0.95)';\n                        }\n                    }\n                    \n                    // Another oddity - when there's regular data but the grouping\n                    // is set to stacked and the Y axis is on the left\n                    if (properties.grouping === 'stacked' && typeof this.data[indexes[0]] === 'number' && properties.yaxisPosition === 'left') {\n                        x += parseInt(this.coords[i].element.getAttribute('width'));\n                    }\n\n                    // Horizontal alignment\n                    if (typeof properties.labelsAboveHalign === 'string') {\n                        halign = properties.labelsAboveHalign;\n                    }\n\n                    var text = RGraph.SVG.text({\n                        \n                        object:     this,\n                        parent:     this.svgAllGroup,\n                        tag:        'labels.above',\n                        \n                        text:       str,\n                        \n                        x:          x,\n                        y:          y,\n                        \n                        halign:     halign,\n                        valign:     valign,\n                        \n                        font:       textConf.font,\n                        size:       textConf.size,\n                        bold:       textConf.bold,\n                        italic:     textConf.italic,\n                        color:      textConf.color,\n                        \n                        background: properties.labelsAboveBackground        || null,\n                        padding:    properties.labelsAboveBackgroundPadding || 0\n                    });\n                }\n            }\n        };\n\n\n\n\n\n\n\n\n        //\n        // Draws the labelsInbar\n        //\n        this.drawLabelsInbar = function ()\n        {\n            // Go through the above labels\n            if (properties.labelsInbar) {\n            \n                // Default alignment\n                var valign = properties.labelsInbarValign,\n                    halign = properties.labelsInbarHalign;\n\n                // Get the text configuration for the labels\n                var textConf = RGraph.SVG.getTextConf({\n                    object: this,\n                    prefix: 'labelsInbar'\n                });\n                \n                var data = RGraph.SVG.arrayLinearize(this.data);\n\n                for (var i=0; i<this.coords.length; ++i) {\n                    if (RGraph.SVG.isNumber(data[i]) && !isNaN(data[i]) ) {\n                        // The rect element that represents the bar\n                        var el      = this.coords[i].element;                    \n                        var value   = data[i].toFixed(properties.labelsInbarDecimals);\n                        var indexes = RGraph.SVG.sequentialIndexToGrouped(i, this.data);\n    \n    \n                        var dimensions = RGraph.SVG.measureText({\n                            text: str,\n                            bold: textConf.bold,\n                            font: textConf.font,\n                            size: textConf.size\n                        });\n    \n                        var x      = parseFloat(el.getAttribute('x')) + (parseFloat(el.getAttribute('width')) / 2) + properties.labelsInbarOffsetx,\n                            y      = parseFloat(el.getAttribute('y')) + (parseFloat(el.getAttribute('height')) / 2) + properties.labelsInbarOffsety,\n                            width  = dimensions[0],\n                            height = dimensions[1];\n                            \n                        //\n                        // Horizontal alignment\n                        //\n                        if (properties.labelsInbarHalign === 'left') {\n                            halign = 'left';\n                            x      = parseFloat(el.getAttribute('x')) + 5 + properties.labelsInbarOffsetx;\n                        } else if (properties.labelsInbarHalign === 'right') {\n                            halign = 'right';\n                            x      = parseFloat(el.getAttribute('x')) + parseFloat(el.getAttribute('width')) - 5 + properties.labelsInbarOffsetx;\n                        }\n\n                        //\n                        // Vertical alignment\n                        //\n                        if (properties.labelsInbarValign === 'bottom') {\n                            valign = 'bottom';\n                            y      = parseFloat(el.getAttribute('y')) - 5 + parseFloat(el.getAttribute('height')) + properties.labelsInbarOffsety;\n                        } else if (properties.labelsInbarValign === 'top') {\n                            valign = 'top';\n                            y      = parseFloat(el.getAttribute('y')) + 5 + properties.labelsInbarOffsety;\n                        }\n    \n                        var str = properties.labelsAboveSpecific ? properties.labelsAboveSpecific[i].toString() : RGraph.SVG.numberFormat({\n                            object:    this,\n                            num:       value,\n                            prepend:   typeof properties.labelsInbarUnitsPre  === 'string'   ? properties.labelsInbarUnitsPre  : null,\n                            append:    typeof properties.labelsInbarUnitsPost === 'string'   ? properties.labelsInbarUnitsPost : null,\n                            point:     typeof properties.labelsInbarPoint     === 'string'   ? properties.labelsInbarPoint     : null,\n                            thousand:  typeof properties.labelsInbarThousand  === 'string'   ? properties.labelsInbarThousand  : null,\n                            formatter: typeof properties.labelsInbarFormatter === 'function' ? properties.labelsInbarFormatter : null\n                        });\n                        \n                        // Specific label given\n                        if (RGraph.SVG.isArray(properties.labelsInbarSpecific) && (RGraph.SVG.isString(properties.labelsInbarSpecific[i]) || RGraph.SVG.isNumber(properties.labelsInbarSpecific[i]))) {\n                            str = properties.labelsInbarSpecific[i];\n                        }\n    \n                        var text = RGraph.SVG.text({\n                            object:     this,\n                            parent:     this.svgAllGroup,\n                            tag:        'labels.inbar',\n                            text:       str,\n                            x:          x,\n                            y:          y,\n                            halign:     halign,\n                            valign:     valign,\n                            font:       textConf.font,\n                            size:       textConf.size,\n                            bold:       textConf.bold,\n                            italic:     textConf.italic,\n                            color:      textConf.color,\n                            background: properties.labelsInbarBackground        || null,\n                            padding:    properties.labelsInbarBackgroundPadding || 0\n                        });\n                    }\n                }\n            }\n        };\n\n\n\n\n\n\n\n\n        //\n        // Using a function to add events makes it easier to facilitate method\n        // chaining\n        // \n        // @param string   type The type of even to add\n        // @param function func \n        //\n        this.on = function (type, func)\n        {\n            if (type.substr(0,2) !== 'on') {\n                type = 'on' + type;\n            }\n            \n            RGraph.SVG.addCustomEventListener(this, type, func);\n    \n            return this;\n        };\n\n\n\n\n\n\n\n\n        //\n        // Used in chaining. Runs a function there and then - not waiting for\n        // the events to fire (eg the onbeforedraw event)\n        // \n        // @param function func The function to execute\n        //\n        this.exec = function (func)\n        {\n            func(this);\n            \n            return this;\n        };\n\n\n\n\n\n\n\n\n        //\n        // Remove highlight from the chart (tooltips)\n        //\n        this.removeHighlight = function ()\n        {\n            //var highlight = RGraph.SVG.REG.get('highlight');\n            //if (highlight && highlight.parentNode) {\n            //    highlight.parentNode.removeChild(highlight);\n            //}\n            \n            //RGraph.SVG.REG.set('highlight', null);\n            \n            RGraph.SVG.removeHighlight();\n        };\n\n\n\n\n\n\n\n\n        //\n        // The Bar chart grow effect\n        //\n        this.grow = function ()\n        {\n            var opt      = arguments[0] || {},\n                frames   = opt.frames || 30,\n                frame    = 0,\n                obj      = this,\n                data     = [],\n                height   = null,\n                seq      = 0;\n\n            //\n            // Copy the data\n            //\n            data = RGraph.SVG.arrayClone(this.data);\n\n            this.draw();\n\n            var iterate = function ()\n            {\n                for (var i=0,seq=0,len=obj.coords.length; i<len; ++i, ++seq) {\n\n                    var   multiplier = (frame / frames)\n                        // RGraph.SVG.FX.getEasingMultiplier(frames, frame)\n                        // RGraph.SVG.FX.getEasingMultiplier(frames, frame);\n                \n                \n                \n                \n                    // TODO Go through the data and update the value according to\n                    // the frame number\n                    if (typeof data[i] === 'number') {\n\n                        width       = Math.abs(obj.getXCoord(data[i]) - obj.getXCoord(0));\n                        obj.data[i] = data[i] * multiplier;\n                        width       = multiplier * width;\n                        \n                        // Set the new width on the rect\n                        obj.coords[seq].element.setAttribute(\n                            'width',\n                            width\n                        );\n\n                        // Set the correct Y coord on the object\n                        obj.coords[seq].element.setAttribute(\n                            'x',\n                            data[i] > 0\n                                ? obj.getXCoord(0) - (properties.yaxisPosition === 'right' ? width : 0)\n                                : (properties.xaxisScaleMin < 0 && properties.xaxisScaleMax > 0 ? (properties.yaxisPosition === 'right' ? obj.getXCoord(0) : obj.getXCoord(0) - width) : obj.getXCoord(0))\n                        );\n\n                    } else if (typeof data[i] === 'object') {\n\n                        var accumulativeWidth = 0;\n\n                        for (var j=0,len2=data[i].length; j<len2; ++j, ++seq) {\n\n                            width          = Math.abs(obj.getXCoord(data[i][j]) - obj.getXCoord(0));\n                            width          = multiplier * width;\n                            obj.data[i][j] = data[i][j] * multiplier;\n\n                            accumulativeWidth += width;\n\n                            obj.coords[seq].element.setAttribute(\n                                'width',\n                                width\n                            );\n\n                            if (properties.yaxisPosition === 'right') {\n                                if (properties.grouping === 'stacked') {\n                                    obj.coords[seq].element.setAttribute(\n                                        'x',\n                                        obj.getXCoord(0) - accumulativeWidth\n                                    );\n                                } else {\n                                    obj.coords[seq].element.setAttribute(\n                                        'x',\n                                        obj.getXCoord(0) - (obj.coords[seq].element.getAttribute('data-value') < 0 ? 0 : width)\n                                    );\n                                }\n                            \n                            } else {\n\n                                obj.coords[seq].element.setAttribute(\n                                    'x',\n                                    properties.grouping === 'stacked'\n                                        ? obj.getXCoord(0) + (accumulativeWidth - width)\n                                        : properties.grouping === 'grouped' && obj.coords[seq].element.getAttribute('data-value') < 0 ? obj.getXCoord(0) - width : obj.getXCoord(0)\n                                );\n                            }\n                        }\n\n                        //\n                        // Set the height and Y cooord of the backfaces if necessary\n                        //\n                        if (obj.stackedBackfaces[i]) {\n                            obj.stackedBackfaces[i].setAttribute(\n                                'width',\n                                accumulativeWidth\n                            );\n\n                            obj.stackedBackfaces[i].setAttribute(\n                                'x',\n                                properties.yaxisPosition === 'right' ? obj.getXCoord(0) - accumulativeWidth : obj.getXCoord(0)\n                            );\n                        }\n\n                        // Decrease seq by one so that it's not incremented twice\n                        --seq;\n                    }\n                }\n\n                if (frame++ < frames) {\n                    //setTimeout(iterate, frame > 1 ? opt.delay : 200);\n                    RGraph.SVG.FX.update(iterate);\n                } else if (opt.callback) {\n                    RGraph.SVG.redraw();\n                    (opt.callback)(obj);\n                }\n            };\n\n            iterate();\n            \n            return this;\n        };\n\n\n\n\n\n\n\n\n        //\n        // HBar chart Wave effect.\n        // \n        // @param object OPTIONAL An object map of options. You specify 'frames'\n        //                        here to give the number of frames in the effect\n        //                        and also callback to specify a callback function\n        //                        thats called at the end of the effect\n        //\n        // **************************************************************\n        // *** In order to deal with stacked charts, this function is ***\n        // *** complicated - probably significantly more so than it   ***\n        // *** needs to be. As such it most definitely needs          ***\n        // *** refactoring                                            ***\n        // **************************************************************\n        //\n        this.wave = function ()\n        {\n            var stackedAccumulativeWidth = 0;\n\n            // First draw the chart\n            this.draw();\n\n\n            var obj = this,\n                opt = arguments[0] || {};\n            \n            opt.frames      = opt.frames || 60;\n            opt.startFrames = [];\n            opt.counters    = [];\n\n            var framesperbar = opt.frames / 3,\n                frame        = -1,\n                callback     = opt.callback || function () {},\n                width;\n\n            for (var i=0,len=this.coords.length; i<len; i+=1) {\n                opt.startFrames[i] = ((opt.frames / 2) / (obj.coords.length - 1)) * i;\n                opt.counters[i]    = 0;\n                \n                // Now zero the width of the bar\n                this.coords[i].element.setAttribute('width', 0);\n                \n                // Use this loop to set the stackedBackfaces to 0 width\n                if (properties.grouping === 'stacked' && obj.stackedBackfaces[i]) {\n                    obj.stackedBackfaces[i].setAttribute('width', 0);\n                }\n            }\n            \n            // Edge-case\n            if (properties.grouping === 'stacked' && properties.yaxisPosition === 'right') {                \n                previousX = obj.width - properties.marginRight;\n                previousW = 0;\n            }\n\n\n            function iterator ()\n            {\n                ++frame;\n                var group = 0;\n\n                for (var i=0,len=obj.coords.length; i<len; i+=1) {\n                    if (frame > opt.startFrames[i]) {\n                        \n                        var originalWidth = obj.coords[i].element.getAttribute('data-original-width'),\n                            value         = parseFloat(obj.coords[i].element.getAttribute('data-value')),\n                            seq           = i;\n                            indexes       = RGraph.SVG.sequentialIndexToGrouped(i, obj.data);\n                            \n                            if (indexes[0] !== group) {\n                                group = indexes[0];\n                            }\n\n                        obj.coords[i].element.setAttribute(\n                            'width',\n                            width = Math.min(\n                                ((frame - opt.startFrames[i]) / framesperbar) * originalWidth,\n                                originalWidth\n                            )\n                        );\n\n                        stackedAccumulativeWidth += width;\n\n                        if (properties.yaxisPosition === 'right') {\n                            if (properties.grouping === 'stacked') {\n\n                                if (indexes[1] === 0) {\n                                    obj.coords[i].element.setAttribute('x',obj.width - properties.marginRight - width);\n                                    \n                                    var previousX = obj.coords[i].element.getAttribute('x');\n                                } else {\n                                    obj.coords[i].element.setAttribute(\n                                        'x',\n                                        previousX - width\n                                    );\n                                }\n                                \n                            \n                            } else {\n                                obj.coords[i].element.setAttribute(\n                                    'x',\n                                    value >=0\n                                        ? obj.getXCoord(0) - width\n                                        : obj.getXCoord(0)\n                                );\n                            }\n                        } else {\n                            obj.coords[i].element.setAttribute(\n                                'x',\n                                value >=0 ? obj.getXCoord(0) : obj.getXCoord(0) - width\n                            );\n                        }\n                        \n                        \n                        if (properties.grouping === 'stacked' && RGraph.SVG.isArray(obj.data[indexes[0]])) {\n\n                            // Are these two needed any more? //\n                            //var seq = obj.coords[i].element.getAttribute('data-sequential-index');\n                            //var indexes = RGraph.SVG.sequentialIndexToGrouped(seq, obj.data);\n                            ////////////////////////////////////\n\n                            if (properties.yaxisPosition === 'left' && indexes[1] > 0) {\n                                obj.coords[i].element.setAttribute(\n                                    'x',\n                                    parseInt(obj.coords[i - 1].element.getAttribute('x')) + parseInt(obj.coords[i - 1].element.getAttribute('width'))\n                                );\n                            }\n\n                            // Not really related to the code above, reuse this if()\n                            // condition to set the width of the backface\n                            //obj.stackedBackfaces[indexes[0]].setAttribute('width', width);\n                            for (var j=0,cumulativeWidth=0; j<obj.coords2[indexes[0]].length; ++j) {\n                                cumulativeWidth += parseInt(obj.coords2[indexes[0]][j].element.getAttribute('width'))\n                            }\n                            \n                            if (properties.yaxisPosition === 'right') {\n                                obj.stackedBackfaces[indexes[0]].setAttribute('width', cumulativeWidth);\n                                obj.stackedBackfaces[indexes[0]].setAttribute('x', obj.width - properties.marginRight - cumulativeWidth);\n                            } else {\n                            \n                                obj.stackedBackfaces[indexes[0]].setAttribute('x', obj.getXCoord(0));\n\n                                obj.stackedBackfaces[indexes[0]].setAttribute(\n                                    'width',\n                                    cumulativeWidth\n                                );\n                            }\n                            \n                            previousX = obj.coords[i].element.getAttribute('x');\n                            previousW = obj.coords[i].element.getAttribute('width');\n                        }\n                    }\n                }\n\n\n                if (frame >= opt.frames) {\n                    callback(obj);\n                } else {\n                    RGraph.SVG.FX.update(iterator);\n                }\n            }\n            \n            iterator();\n\n            return this;\n        };\n\n\n\n\n\n\n\n\n        //\n        // A worker function that handles Bar chart specific tooltip substitutions\n        //\n        this.tooltipSubstitutions = function (opt)\n        {\n            var indexes = RGraph.SVG.sequentialIndexToGrouped(opt.index, this.data);\n\n            return {\n                  index: indexes[1],\n                dataset: indexes[0],\n        sequentialIndex: opt.index,\n                  value: typeof this.data[indexes[0]] === 'number' ? this.data[indexes[0]] : this.data[indexes[0]][indexes[1]],\n                 values: typeof this.data[indexes[0]] === 'number' ? [this.data[indexes[0]]] : this.data[indexes[0]]\n            };\n        };\n\n\n\n\n\n\n\n\n        //\n        // A worker function that returns the correct color/label/value\n        //\n        // @param object specific The indexes that are applicable\n        // @param number index    The appropriate index\n        //\n        this.tooltipsFormattedCustom = function (specific, index)\n        {\n            if (typeof this.data[0] === 'object') {\n                var label = (!RGraph.SVG.isNull(properties.tooltipsFormattedKeyLabels) && typeof properties.tooltipsFormattedKeyLabels === 'object' && properties.tooltipsFormattedKeyLabels[index])\n                                ? properties.tooltipsFormattedKeyLabels[index]\n                                : '';\n\n            } else {\n                var label = (!RGraph.SVG.isNull(properties.tooltipsFormattedKeyLabels) && typeof properties.tooltipsFormattedKeyLabels === 'object' && properties.tooltipsFormattedKeyLabels[specific.index])\n                                ? properties.tooltipsFormattedKeyLabels[specific.index]\n                                : '';\n            }\n\n\n            return {\n                label: label\n            };\n        };\n\n\n\n\n\n\n\n\n        //\n        // This allows for static tooltip positioning\n        //\n        this.positionTooltipStatic = function (args)\n        {\n            var obj      = args.object,\n                e        = args.event,\n                tooltip  = args.tooltip,\n                index    = args.index,\n                svgXY    = RGraph.SVG.getSVGXY(obj.svg),\n                coords   = this.coords[args.index];\n\n            // Position the tooltip in the X direction\n            args.tooltip.style.left = (\n                  svgXY[0]                       // The X coordinate of the canvas\n                + coords.x                       // The X coordinate of the bar on the chart\n                - (tooltip.offsetWidth / 2)      // Subtract half of the tooltip width\n                + (coords.width / 2)                // Add half of the bar width\n            ) + 'px';\n\n            args.tooltip.style.top  = (\n                  svgXY[1]                       // The Y coordinate of the canvas\n                + coords.y                      // The Y coordinate of the bar on the chart\n                - tooltip.offsetHeight           // The height of the tooltip\n                - 10                             // An arbitrary amount\n            ) + 'px';\n        };\n\n\n\n\n\n\n\n\n        //\n        // Draw a line on the chart - just each of the X points\n        // (ie the top of the bars) connected by a line. This\n        // does mean you can set the colors property to transparent\n        // and you have a vertical line.\n        //\n        this.drawLine = function ()\n        {\n            if (this.properties.lineShadow) {\r\n                RGraph.SVG.setShadow({\n                    object:     this,\n                    id:         'lineDropShadow_' + this.uid,\n                    offsetx:    this.properties.lineShadowOffsetx,\n                    offsety:    this.properties.lineShadowOffsety,\n                    blur:       this.properties.lineShadowBlur,\n                    color:      this.properties.lineShadowColor\r\n                });\n            }\n\n            if (this.properties.lineSpline) {\n                \n                // Set this so that we can refer to the object\n                var obj = this;\n                var c   = RGraph.SVG.arrayClone(this.coords);\n\n                // Get the coordinates for the spline line\n                // coordinates\n                var coordinates = Spline(c, {return: true});\n                \n                // Draw a line back to the X axis (whichever side\n                // that may be)\n                if (this.properties.lineFilled) {\n                \n                    // Copy the coordinates array so that the coordinates of\n                    // the axis can bw added to it\n                    var fillAreaCoordinates = RGraph.SVG.arrayClone(coordinates);\n                \n                    // Add the coordinates that take the fill back\n                    // to the Y axis\n                    if (this.properties.yaxisPosition === 'right') {\n                        fillAreaCoordinates.push([this.width - this.properties.marginRight, coordinates[coordinates.length - 1][1]]);\n                        fillAreaCoordinates.push([this.width - this.properties.marginRight, coordinates[0][1]]);\n                    } else {\n                        fillAreaCoordinates.push([this.properties.marginLeft, coordinates[coordinates.length - 1][1]]);\n                        fillAreaCoordinates.push([this.properties.marginLeft, coordinates[0][1]]);\n                    }\n                \n                    RGraph.SVG.create({\n                        svg: obj.svg,\n                        parent: obj.svgAllGroup,\n                        type: 'path',\n                        attr: {\n                            fill:              obj.properties.lineFilledColor,\n                            stroke:            'transparent',\n                            d:                 RGraph.SVG.create.pathString(fillAreaCoordinates),\n                            'clip-path':       obj.isTrace ? 'url(#trace-effect-clip)' : ''\n                        }\n                    });\n                }\n                \n                RGraph.SVG.create({\n                    svg: obj.svg,\n                    parent: obj.svgAllGroup,\n                    type: 'path',\n                    attr: {\n                        fill:              \"transparent\",\n                        stroke:            obj.properties.lineColor,\n                        'stroke-width':    obj.properties.lineLinewidth,\n                        'stroke-linejoin': 'round',\n                        'stroke-linecap':  'round',\n                        d:                 RGraph.SVG.create.pathString(coordinates),\n                        filter:            obj.properties.lineShadow ? 'url(#lineDropShadow_' + obj.uid + ')' : '',\n                        'clip-path':       obj.isTrace ? 'url(#trace-effect-clip)' : ''\n                    }\n                });\n\n            } else {\n            \n                // TODO Need to skip null values at the start\n                //      of the array here\n            \n                var d = '';\n\n                // Move to the first coordinate\n                if (RGraph.SVG.isNumber(this.data[0])) {\n                    if (this.properties.yaxisPosition === 'right') {\n                        d = 'M {1} {2} '.format(\r\n                            this.coords[0].x,\r\n                            this.coords[0].y + (this.coords[0].height / 2)\n                        );\n                    } else {\n\n                        var v = Number(this.coords[0].element.getAttribute('data-value'));\n\n                        d = 'M {1} {2} '.format(\r\n                            this.coords[0].x + (v < 0 ? 0 : this.coords[0].width),\r\n                            this.coords[0].y + (this.coords[0].height / 2)\n                        );\n                    }\n                }\r\n\r\n                // Draw a line to subsequent points unless\n                // that point is null, in which case move\n                // to it instead\r\n                for (let i=0; i<this.coords.length; ++i) {\r\n\n                    if (RGraph.SVG.isNull(this.data[i])) {\n                        var action = 'M';\n                        var x      = 0;\r\n                        var y      = 0;\n                    } else if (RGraph.SVG.isNull(this.data[i - 1])) {\n                        var action  = 'M';\r\n                        var x       = this.coords[i].x + (this.properties.yaxisPosition === 'right' ? 0 : this.coords[i].width);\r\n                        var y       = this.coords[i].y + (this.coords[i].height / 2);\n                    } else {\n                        var action  = 'L';\r\n                        var x       = this.coords[i].x + (this.properties.yaxisPosition === 'right' ? (this.data[i] < 0 ? this.coords[i].width : 0) : (this.data[i] < 0 ? 0 : this.coords[i].width) );\r\n                        var y       = this.coords[i].y + (this.coords[i].height / 2);\n                    }\n\n                    d += \r\n                        '{1} {2} {3} '.format(\n                        action,x, y\r\n                    );\r\n                }\n\n\n\n\n\n\n                if (properties.lineFilled) {\n                \n                    RGraph.SVG.create({\n                        svg:    this.svg,\n                        type:   'path',\n                        parent: this.svgAllGroup,\n                        attr: {\n                            d: d + ' L ' + (properties.yaxisPosition === 'right' ? [this.width - this.properties.marginRight, y].join(' ') : [this.properties.marginLeft, y].join(' '))\n                                 + ' L ' + (properties.yaxisPosition === 'right' ? [this.width - this.properties.marginRight, this.coords[0].y + (this.coords[0].height / 2)] : [this.properties.marginLeft, (this.coords[0].y + (this.coords[0].height / 2))]).join(' ')\n                                 + ' z',\n                            stroke: 'transparent',\n                            fill:   !RGraph.SVG.isNull(this.properties.lineFilledColor) ? this.properties.lineFilledColor : this.properties.lineColor,\n                            'stroke-width': 0.001,\n                            'stroke-linecap': this.properties.lineLinecap,\n                            'stroke-linejoin': this.properties.lineLinejoin,\n                            //filter: this.properties.lineShadow ? 'url(#lineDropShadow_' + this.uid + ')' : '',\n                            'clip-path': this.isTrace ? 'url(#trace-effect-clip)' : ''\n                        }\n                    });\n                }\n\n\n\n\n\n                var path = RGraph.SVG.create({\n                    svg:    this.svg,\n                    type:   'path',\n                    parent: this.svgAllGroup,\n                    attr: {\n                        d:      d,\n                        stroke: this.properties.lineColor,\n                        fill:   'transparent',\n                        'stroke-width': this.properties.lineLinewidth,\n                        'stroke-linecap': this.properties.lineLinecap,\n                        'stroke-linejoin': this.properties.lineLinejoin,\n                        filter: this.properties.lineShadow ? 'url(#lineDropShadow_' + this.uid + ')' : '',\n                        'clip-path': this.isTrace ? 'url(#trace-effect-clip)' : ''\n                    }\n                });\n\n            }\n\n\n\n\n\n\n\n\n\n\n\n            //\n            // TODO Add more styles of tickmarks\n            //\n            var obj = this;\n            this.coords.forEach(function (v, k, arr)\n            {\n                if (typeof obj.properties.lineTickmarksStyle === 'string') {\n                    \n                    var isEndTick  = (k === 0 || k === (arr.length - 1));\n                    var isNull     = RGraph.SVG.isNull(obj.data[k]);\n                    var prevIsNull = RGraph.SVG.isNull(obj.data[k - 1]);\n                    var nextIsNull = RGraph.SVG.isNull(obj.data[k + 1]);\n                    var isLast     = k === (arr.length - 1);\n\n                    //\n                    // Does this tickmark need to be drawn?\n                    //\n                    if (isNull && !obj.properties.lineTickmarksDrawNull) return;\n                    if (!isNull && prevIsNull && nextIsNull && !obj.properties.lineTickmarksDrawNonNull) return;\n\n                    //\n                    // Draw the various styles of tickmark\n                    //\n                    switch (obj.properties.lineTickmarksStyle) {\n                        case 'circle':\n                        case 'filledcircle':\n                        case 'filledendcircle':\n                        case 'endcircle':\n                            if (\n                                   (obj.properties.lineTickmarksStyle.indexOf('end') >= 0 && isEndTick)\n                                || obj.properties.lineTickmarksStyle.indexOf('end') === -1\n                               ) {\n\n\n\n                                    var x = v.x;\n                                    var y = v.y + (v.height / 2);\n\n                                    // Adjust the tickmark if the\n                                    // Y-axis position is on the left\n                                    // and the value is positive\n                                    if (   obj.properties.yaxisPosition === 'left'\n                                        && Number(v.element.getAttribute('data-value')) > 0\n                                       ) {\n                                        x += v.width;\n                                    }\n\n                                    // Adjust the tickmark if the\n                                    // Y-axis position is on the right\n                                    // and the value is negative\n                                    if (   obj.properties.yaxisPosition === 'right'\n                                        && Number(v.element.getAttribute('data-value')) < 0\n                                       ) {\n                                        x += v.width;\n                                    }\n\n\n                                RGraph.SVG.create({\n                                    svg:  obj.svg,\n                                    type: 'circle',\n                                    parent: obj.svgAllGroup,\n                                    attr: {\n                                        cx:          x,\n                                        cy:          y,\n                                        r:           obj.properties.lineTickmarksSize,\n                                        fill:        obj.properties.lineColor,\n                                        filter:      obj.properties.lineShadow ? 'url(#lineDropShadow_' + obj.uid + ')' : '',\n                                        'clip-path': obj.isTrace ? 'url(#trace-effect-clip)' : ''\n                                    }\n                                });\n\n                                // Draw the center part of the circle tickmark\n                                if (obj.properties.lineTickmarksStyle.indexOf('filled') < 0) {\n\n                                    RGraph.SVG.create({\n                                        svg:    obj.svg,\n                                        type:   'circle',\n                                        parent: obj.svgAllGroup,\n                                        attr: {\n                                            cx:         x,\n                                            cy:         y,\n                                            r:          RGraph.SVG.isNumber(obj.properties.lineTickmarksLinewidth)\n                                                          ? (obj.properties.lineTickmarksSize - obj.properties.lineTickmarksLinewidth)\n                                                          : (obj.properties.lineTickmarksSize - 3),\n                                            fill:       'white',\n                                            'clip-path':obj.isTrace ? 'url(#trace-effect-clip)' : ''\n                                        }\n                                    });\n                                }\n                            }\n                            break;\n\n                        case 'square':\n                        case 'rect':\n                        case 'filledsquare':\n                        case 'filledrect':\n                        case 'filledendsquare':\n                        case 'filledendrect':\n                        case 'endsquare':\n                        case 'endrect':\n                            if (\n                                   (obj.properties.lineTickmarksStyle.indexOf('end') >= 0 && isEndTick)\n                                || obj.properties.lineTickmarksStyle.indexOf('end') === -1\n                               ) {\n\n                                    var x = v.x - obj.properties.lineTickmarksSize + (RGraph.SVG.isNull(obj.properties.lineTickmarksLinewidth) ? 3 : obj.properties.lineTickmarksLinewidth);\n                                    var y = v.y + (v.height / 2) - obj.properties.lineTickmarksSize;\n\n                                    // Adjust the tickmark if the\n                                    // Y-axis position is on the left\n                                    // and the value is positive\n                                    if (   obj.properties.yaxisPosition === 'left'\n                                        && Number(v.element.getAttribute('data-value')) > 0\n                                       ) {\n                                        x += v.width;\n                                    }\n\n                                    // Adjust the tickmark if the\n                                    // Y-axis position is on the right\n                                    // and the value is negative\n                                    if (   obj.properties.yaxisPosition === 'right'\n                                        && Number(v.element.getAttribute('data-value')) < 0\n                                       ) {\n                                        x += v.width;\n                                    }\n\n                                    RGraph.SVG.create({\n                                        svg:    obj.svg,\n                                        type:   'rect',\n                                        parent: obj.svgAllGroup,\n                                        attr: {\n                                            x:           x,\n                                            y:           y,\n                                            width:       obj.properties.lineTickmarksSize * 2,\n                                            height:      obj.properties.lineTickmarksSize * 2,\n                                            fill:        obj.properties.lineColor,\n                                            filter:      obj.properties.lineShadow ? 'url(#lineDropShadow_' + obj.uid + ')' : '',\n                                            'clip-path': obj.isTrace ? 'url(#trace-effect-clip)' : ''\n                                        }\n                                    });\n\n                                // Draw the center part of the rect tickmark\n                                if (obj.properties.lineTickmarksStyle.indexOf('filled') < 0) {\n                                \n                                \n                                    RGraph.SVG.create({\n                                        svg:    obj.svg,\n                                        type:   'rect',\n                                        parent: obj.svgAllGroup,\n                                        attr: {\n                                            x:           x + (obj.properties.lineTickmarksLinewidth),\n                                            y:           y + (obj.properties.lineTickmarksLinewidth),\n                                            width:       RGraph.SVG.isNumber(obj.properties.lineTickmarksLinewidth)\n                                                            ? (obj.properties.lineTickmarksSize * 2) - (2 * obj.properties.lineTickmarksLinewidth)\n                                                            : (obj.properties.lineTickmarksSize * 2) - 3 - 3,\n                                            height:      RGraph.SVG.isNumber(obj.properties.lineTickmarksLinewidth)\n                                                            ? (obj.properties.lineTickmarksSize * 2) - (2 * obj.properties.lineTickmarksLinewidth)\n                                                            : (obj.properties.lineTickmarksSize * 2) - 3 - 3,\n                                            fill:        'white',\n                                            'clip-path': obj.isTrace ? 'url(#trace-effect-clip)' : ''\n                                        }\n                                    });\n                                }\n                            }\n                            break;    \n                    }\n                }\n            });\n\n\n\n\n\n\n            //\r\n            // This function draws a spline using the HBar coords\r\n            // \r\n            // @param array  coords  The coordinates\r\n            //\r\n            function Spline (coords, opt = {})\r\n            {\r\n                var coordsSpline = [[]];\n\r\n                var yCoords     = [],\r\n                    interval    = (obj.height - obj.properties.marginTop - obj.properties.marginBottom) / coords.length;\r\n                    path        = [];\r\n\r\n                //\r\n                // The drawSpline function needs an array of JUST\n                // the X values - so put the coords into the correct\n                // format\r\n                //\n\r\n                for (var i=0; i<coords.length;++i) {\n                    coords[i] = Number(coords[i].x) +\n                                    (obj.properties.yaxisPosition === 'right'\n                                        ? (obj.data[i] < 0 ? Number(coords[i].width) : 0)\n                                        : (obj.data[i] < 0 ? 0 : Number(coords[i].width))\n                                    );\r\n                }\r\n\r\n    \r\n\r\n    \r\n                //\r\n                // Get the Points array in the format we want -\n                // first value should be null along with the lst\n                // value\r\n                //\r\n                var P = [coords[0]];\r\n                for (var i=0; i<coords.length; ++i) {\r\n                    P.push(coords[i]);\r\n                }\r\n                P.push(\n                    coords[coords.length - 1] + (coords[coords.length - 1] - coords[coords.length - 2])\n                );\r\n\n                // This is is necessary to center the points\n                // within each bar/section\n                var halfsection = ((obj.height - obj.properties.marginTop - obj.properties.marginBottom) / obj.data.length) / 2\n\r\n                for (var j=1; j<P.length-2; ++j) {\r\n                    for (var t=0; t<10; ++t) {\r\n                        \r\n                        var xCoord = Spline( t/10, P[j-1], P[j], P[j+1], P[j+2] );\r\n\r\n                        yCoords.push(\n                            ((j-1) * interval) + (t * (interval / 10)) + obj.properties.marginTop + halfsection\n                        );\r\n\r\n                        path.push([\n                            xCoord,\n                            yCoords[yCoords.length - 1]\n                        ]);\r\n    \r\n                        \r\n                        if (typeof index == 'number') {\r\n                            coordsSpline[0].push([\n                                xCoords[xCoords.length - 1],\n                                yCoords[yCoords.length - 1]\n                            ]);\r\n                        }\r\n                    }\r\n                }\r\n\r\n    \r\n                // Draw the last section\n                var last = [\n                    obj.coords[obj.coords.length - 1].x + (obj.properties.yaxisPosition === 'right'  ? obj.coords[obj.coords.length - 1].width : 0),\n                    obj.coords[obj.coords.length - 1].y + (obj.coords[obj.coords.length - 1].height / 2)\n                ];\n                \n                // Adjust the position of the last point\n                if (obj.properties.yaxisPosition === 'left' && obj.coords[j - 1].element.getAttribute('data-value') > 0) {\n                    last[0] += obj.coords[obj.coords.length - 1].width;\n                }\n                \n                // Adjust the position of the last point\n                if (obj.properties.yaxisPosition === 'right' && obj.coords[j - 1].element.getAttribute('data-value') > 0) {\n                    last[0] -= obj.coords[obj.coords.length - 1].width;\n                }\n\r\n                path.push([\n                    last[0],\n                    last[1]\n                ]);\n\r\n                if (typeof index === 'number') {\r\n                    coordsSpline[0].push([\n                        last[0],\n                        last[1]\n                    ]);\r\n                }\n\n                var str = '';\n                path.forEach(function (v,k,arr)\n                {\n                    var command = (k === 0 ? 'M' : 'L');\n                    str += ' {1} {2} {3}'.format(command, v[0], v[1]);\n                });\n\n\n\n                //\n                // Create the path which depicts the spline\n                //\n                if (opt.return) {\n\n                    // The 'path' variable appears to contain all\n                    // of the coordinates.\n                    return path;\n\n                } else {\n\n                    RGraph.SVG.create({\n                        svg: obj.svg,\n                        parent: obj.svgAllGroup,\n                        type: 'path',\n                        attr: {\n                            fill:              \"transparent\",\n                            stroke:            obj.properties.lineColor,\n                            'stroke-width':    obj.properties.lineLinewidth,\n                            'stroke-linejoin': 'round',\n                            'stroke-linecap':  'round',\n                            d:                 str,\n                            filter:            obj.properties.lineShadow ? 'url(#lineDropShadow_' + obj.uid + ')' : '',\n                            'clip-path':       obj.isTrace ? 'url(#trace-effect-clip)' : ''\n                        }\n                    });\n                }\r\n\r\n    \r\n        \r\n                function Spline (t, P0, P1, P2, P3)\r\n                {\r\n                    return 0.5 * ((2 * P1) +\r\n                                 ((0-P0) + P2) * t +\r\n                                 ((2*P0 - (5*P1) + (4*P2) - P3) * (t*t) +\r\n                                 ((0-P0) + (3*P1)- (3*P2) + P3) * (t*t*t)));\r\n                }\r\n            }\n        };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        //\r\n        // A trace effect for the line\r\n        //\r\n        // @param object    Options to give to the effect\r\n        // @param  function A function to call when the effect has completed\r\n        //\r\n        this.trace = function ()\r\n        {\r\n            var opt      = arguments[0] || {},\r\n                frame    = 1,\r\n                frames   = opt.frames || 60,\r\n                obj      = this;\r\n            \r\n            this.isTrace = true;\r\n\r\n            this.draw();\r\n                \r\n\r\n\r\n            // Create the clip area\n\r\n            var clippath = RGraph.SVG.create({\n                svg:  this.svg,\n                type: 'clipPath',\n                parent: this.svg.defs,\n                attr: {\n                    id: 'trace-effect-clip'\n                }\n            });\r\n\r\n            var clippathrect = RGraph.SVG.create({\r\n                svg: this.svg,\r\n                type: 'rect',\r\n                parent: clippath,\r\n                attr: {\r\n                    x: 0,\r\n                    y: 0,\r\n                    width: this.width,\r\n                    height: 0\r\n                }\r\n            });\r\n\r\n            var iterator = function ()\r\n            {\r\n                var height = (frame++) / frames * obj.height;\r\n\r\n                clippathrect.setAttribute(\"height\", height);\r\n\r\n                if (frame <= frames) {\r\n                    RGraph.SVG.FX.update(iterator);\r\n                } else {\r\n                    \r\n                    // Remove the clippath\r\n                    clippath.parentNode.removeChild(clippath);\r\n                    \r\n                    if (opt.callback) {\r\n                        (opt.callback)(obj);\r\n                    }\r\n                }\r\n            };\r\n            \r\n            iterator();\r\n            \r\n            return this;\r\n        };\n\n\n\n\n\n\n\n\n        //\n        // This function handles clipping to scale values. Because\n        // each chart handles scales differently, a worker function\n        // is needed instead of it all being done centrally.\n        //\n        // @param object clipPath The <clipPath> node\n        //\n        this.clipToScaleWorker = function (clipPath)\n        {\n            // The Regular expression is actually done by the\n            // calling RGraph.clipTo.start() function  in the core\n            // library\n            if (RegExp.$1 === 'min') from = this.min; else from = Number(RegExp.$1);\n            if (RegExp.$2 === 'max') to   = this.max; else to   = Number(RegExp.$2);\n\n            var height  = this.height,\n                x1     = this.getXCoord(from),\n                x2     = this.getXCoord(to),\n                width  = Math.abs(x2 - x1),\n                y      = 0,\n                x      = Math.min(x1, x2);\n\n\n            // Increase the width if the maximum value is \"max\"\n            if (RegExp.$2 === 'max') {\n                width += this.properties.marginRight;\n            }\n        \n            // Increase the height if the minimum value is \"min\"\n            if (RegExp.$1 === 'min') {\n                x = 0;\n                width += this.properties.marginLeft;\n            }\n\n\n            RGraph.SVG.create({\n                svg:    this.svg,\n                type:   'rect',\n                parent: clipPath,\n                attr: {\n                    x:      x,\n                    y:      y,\n                    width:  width,\n                    height: height\n                }\n            });\n            \n            // Now set the clip-path attribute on the first\n            // Line charts all-elements group\r\n            this.svgAllGroup.setAttribute(\r\n                'clip-path',\r\n                'url(#' + clipPath.id + ')'\r\n            );\n        };\n\n\n\n\n\n\n\n\n        //\n        // Set the options that the user has provided\n        //\n        for (i in conf.options) {\n            if (typeof i === 'string') {\n                this.set(i, conf.options[i]);\n            }\n        }\n    };\n            \n    return this;\n\n// End module pattern\n})(window, document);"],"names":[],"version":3,"file":"index.7159f000.js.map","sourceRoot":"/__parcel_source_root/"}